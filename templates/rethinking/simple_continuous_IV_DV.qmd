---
title: "Height Weight Model"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

- next step: actually go through chapter for this 


## Process

1. State a clear question
2. Sketch your casual assumptions
3. Use the sketch to define a generative model
4. Use the generative model to build and estimator 

```{r}
library(ggdag)
library(dagitty)
library(ggplot2)
library(cmdstanr)
library(rethinking)
library(bayesplot)
theme_set(theme_dag())
data(Howell1)
```

### Scientific Question

Describe the association between adult weight and height using a linear model

```{r}
d <- Howell1[Howell1$age>= 18,]
```


### State Causal Assumptions 

We assume that height causes weight.
Weight cannot cause height.
There is also unobserved influnce on weight not from height. 

```{r}
dag <- dagitty("dag{H -> W <- U}")

ggdag(dag, layout = "circle") +
  labs(title = "Height causes Weight + Unobserved Error")
```

### Make Generative Model 

1. Use R to make data and visually check it  
2. Feed that data to Stan
3. Summerise the data 

```{r}
# With R Code 

# how many people? 
n_samples <- 200
# make heights, sample with set range
adult_heights <- runif(n_samples, min = 130, max = 170)
# add in noise via the U variable
# jiggles values in sample to have SD of 5
U <- rnorm(n_samples, 0, sd = 5)
# causally create values of weight via linear construction 
# b is how much to multiply heights by to get weight 
b <- 0.5
adult_weights <- b*adult_heights + U

simulated_hw_data <- list(
  N_Samples = n_samples,
  Weights = adult_weights,
  Heights = adult_heights
)

simulated_hw_data

# could wrap this in a function 

# Visually check this makes sense 
plot(adult_weights ~ adult_heights, col = 2, lwd = 3)

# Simulate data from prior using estimator 

height_weight_stan <- 
   cmdstan_model(
  "templates/rethinking/cont_IV_DV.stan",
    cpp_options = list(stan_threads = TRUE)
  )


pp_hw_model <- height_weight_stan$sample(
  data = 
    list(
      N = simulated_hw_data$N_Samples,
      w = simulated_hw_data$Weights,
      h = simulated_hw_data$Heights
    ),
    chains = 4,
    parallel_chains = 4,
    threads_per_chain = 2,
    adapt_delta = 0.95,
    iter_warmup = 1000,
    iter_sampling = 1000,
    refresh = 50
)


# Possible values 
pp_hw_model$summary(c("alpha","beta","sigma")) |>
  dplyr::select(variable, mean, median, q5,q95, rhat) |>
  print(n = Inf)

pp_hw_model$draws()

mcmc_areas(
  as.matrix(
    pp_hw_model$draws(format = "matrix")
    ),
           pars = c("beta","sigma"),
           prob = 0.8)




```

### Approxmiate

```{r}
m3.1 <- quap(
  alist(
    W ~ dnorm(mu,sigma),
    mu <- a + b*H,
    a ~ dnorm(0,10),
    b ~ dunif(0,1),
    sigma ~ dunif(0,10)
  ) , data=list(W=W, H=H)
  )

n <- 1e3
a <- rnorm(n, 0, 10)
b <- runif(n, 0, 1)
plot(NULL, xlim=c(130,170), ylim = c(50,90),
                xlab = "height", ylab = "weight")
for (j in 1:50) abline(a = a[j], b=b[j], lwd = 2, col = 2)

precis(m3.1)

post <- extract.samples(m3.1)

head(post)

rethinking::stancode(m3.1)

```

### Re-Build with Stan 

From [Stan User Guide](https://mc-stan.org/docs/stan-users-guide/linear-regression.html) 

```{r}

kung_list = list(
  N = length(W),
  w=W,
  h=H)

m3.1_stan <-
  m3.1_model$sample(
    data =
      list(
        N = length(W),
        w = W, 
        h = H
      ),
    chains = 4,
    parallel_chains = 4,
    threads_per_chain = 2,
    ### Slow and reliable
    # adapt_delta = 0.95,
    iter_warmup = 1000,
    iter_sampling = 1000,
    refresh = 50
    ### (Relatively) quick and dirty
    ##iter_warmup = 500,
    ##iter_sampling = 500,
    ## refresh = 25
  )


# library("bayesplot")
# library("rstanarm")
# library("ggplot2")
# 
# fit <- stan_glm(mpg ~ ., data = mtcars)
# posterior <- as.matrix(fit)
# 
# plot_title <- ggtitle("Posterior distributions",
#                       "with medians and 80% intervals")
# mcmc_areas(posterior,
#            pars = c("cyl", "drat", "am", "wt"),
#            prob = 0.8) + plot_title

```


### Rethinking checks but with stan 

```{r}
m3.1

m3.1_stan





```



